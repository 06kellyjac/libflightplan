.\" Generated by scdoc 1.11.2
.\" Complete documentation for this program is not available as a GNU info page
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.nh
.ad l
.\" Begin generated content:
.TH "libflightplan" "3" "1980-01-01" "github.com/mitchellh/libflightplan" "Library Functions Manual"
.P
.SH NAME
.P
libflightplan - library used to read and write aviation flight plans
.P
.SH DESCRIPTION
.P
\fBlibflightplan\fR is a library for reading and writing flight plans in
various formats.\& Flight plans are used in aviation to save properties of
one or more flights such as route (waypoints), altitude, source and departure
airport, etc.\&
.P
This library is available as a native C library as well as Zig.\& The man pages
focus on the C API currently.\&
.P
.SH Example
.P
The example below shows how the C API can be used to parse a ForeFlight
flight plan and read route information about it.\&
.P
.nf
.RS 4
#include <stddef\&.h>
#include <stdio\&.h>
#include <flightplan\&.h>

int main() {
	// Parse our flight plan from an FPL file out of ForeFlight\&.
	flightplan *fpl = fpl_parse_garmin("\&./test/basic\&.fpl");
	if (fpl == NULL) {
		// We can get a more detailed error\&.
		flightplan_error *err = fpl_last_error();
		printf("error: %sn", fpl_error_message(err));
		fpl_cleanup();
		return 1;
	}

	// Iterate and output the full ordered route\&.
	int max = fpl_route_points_count(fpl);
	printf("nroute: "%s" (points: %d)n", fpl_route_name(fpl), max);
	for (int i = 0; i < max; i++) {
		flightplan_route_point *point = fpl_route_points_get(fpl, i);
		printf("  %sn", fpl_route_point_identifier(point));
	}

	fpl_free(fpl);
	fpl_cleanup();
	return 0;
}
.fi
.RE
.P
.SH AUTHORS
.P
Mitchell Hashimoto (xmitchx@gmail.\&com) and any open source contributors.\&
See <https://github.\&com/mitchellh/libflightplan>.\&
